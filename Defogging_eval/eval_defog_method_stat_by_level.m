% --------------------------
statistics_root = './statistics';

metric_name = 'RI'; % Visual for VI. Undist for RI

% Make sure <statistics_root>/<method_name>_<metric_name>_eval.mat has been
% generated by runing eval_defog_method.m
% You can put multiple methods in <method_names>
method_names = {'refined_DCP_3_ep_60'};

fog_level_file = 'fog_level_labels/fog_level.mat';
% --------------------------


fogLevelMat = load(fog_level_file);
levelData = fogLevelMat.levels;

for meth_id = 1:length(method_names)
    scores_light = [];
    scores_middle = [];
    scores_heavy = [];
    
    methodName = method_names{meth_id};
    
    methodMatPath = fullfile(statistics_root, sprintf('%s_%s_eval.mat',methodName,metric_name));
    methodMat = load(methodMatPath);
    methodMat = methodMat.eval_result;
    
    for file_id = 1:length(methodMat.files)
        curFileName = methodMat.files{file_id};
        curScore = methodMat.scores(file_id);
        
        if strcmp(methodName, 'fog')
            level_id = find(strcmp(curFileName,fogLevelMat.files) == 1);
        else
            nameContents = split(curFileName,'_');
            tempFileName = sprintf('%s_%s.png',nameContents{1},nameContents{2});
            level_id = find(strcmp(tempFileName,fogLevelMat.files) == 1);
        end
        
        if levelData(level_id) == 1
            scores_light = [scores_light;curScore];
        else
            if levelData(level_id) == 2
                scores_middle = [scores_middle;curScore];
            else
                scores_heavy = [scores_heavy;curScore];
            end
        end
    end
    
    all_scores = [scores_light;scores_middle;scores_heavy];
    disp(['--- ', methodName]);
    disp(['- ', metric_name]);
%     disp(['score std error: ', num2str(sqrt(var(all_scores)))]);
    disp(['average score: ', num2str(mean(all_scores))]);
%     disp(['light level std: ', num2str(sqrt(var(scores_light)))]);
    disp(['light level avg: ', num2str(mean(scores_light))]);

%     disp(['middle level std: ', num2str(sqrt(var(scores_middle)))]);
    disp(['middle level avg: ', num2str(mean(scores_middle))]);

%     disp(['heavy level std: ', num2str(sqrt(var(scores_heavy)))]);
    disp(['heavy level avg: ', num2str(mean(scores_heavy))]);
    
end





